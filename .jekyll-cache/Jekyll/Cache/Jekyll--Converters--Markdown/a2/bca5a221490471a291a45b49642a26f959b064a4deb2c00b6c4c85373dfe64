I"t6<h1 id="디스코드-봇을-만들어보자">디스코드 봇을 만들어보자!</h1>

<p>가장 먼저 할것은 간단한 디스코드 봇을 만들어보는것 입니다. 파이썬에 대한 기본 지식만 있다면 누구든지 쉽게 만들어볼 수 있습니다.</p>
<hr />
<h2 id="1-간단한-디스코드-봇-생성">1. 간단한 디스코드 봇 생성</h2>
<hr />
<p>저희는 디스코드 봇을 위한 파이썬 API인 <code class="language-plaintext highlighter-rouge">discord.py</code>를 이용해 만들어보겠습니다.<br />
먼저 개발환경에 <code class="language-plaintext highlighter-rouge">discord.py</code> 라이브러리를 설치해야합니다.</p>

<p><strong>discord.py는 파이썬 3.5.3 이상의 버전에서 작동합니다.</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 -m pip install -U discord.py 
</code></pre></div></div>
<p>파이썬의 <code class="language-plaintext highlighter-rouge">pip</code>을 이용한 라이브러리 설치에 대해 익숙치 않으신 분들은 여러 글들을 찾아보시면 도움이 많이 될겁니다.</p>

<p>그럼 이제 사용할 라이브러리 설치가 끝났으니 직접 <code class="language-plaintext highlighter-rouge">.py</code> 파일을 만들어봅시다!</p>

<p><code class="language-plaintext highlighter-rouge">discord.py</code> 라이브러리는 <code class="language-plaintext highlighter-rouge">discord</code>와 <code class="language-plaintext highlighter-rouge">discord.ext</code>를 제공하는데, 이때 <code class="language-plaintext highlighter-rouge">discord.ext</code>는 기존에 비해 추가된 함수들의 폴더로 기존의 <code class="language-plaintext highlighter-rouge">discord</code> 함수에 있는 명령어들 보다 <strong>체계적이고 깔끔하게 코드를 구현할 수 있습니다.</strong> 따라서 저희는 <code class="language-plaintext highlighter-rouge">discord.ext</code>에서 제공하는 함수들로 코드를 작성해보겠습니다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">myFirstBot.py</code>  파이썬 파일 생성</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">discord</span>
<span class="kn">from</span> <span class="nn">discord.ext</span> <span class="kn">import</span> <span class="n">commands</span>

<span class="n">bot</span> <span class="o">=</span> <span class="n">commands</span><span class="p">.</span><span class="n">Bot</span><span class="p">(</span><span class="n">command_prefix</span><span class="o">=</span><span class="s">'!'</span><span class="p">)</span>

<span class="o">@</span><span class="n">bot</span><span class="p">.</span><span class="n">event</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">on_ready</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"봇이 시작되었습니다."</span><span class="p">)</span>

<span class="o">@</span><span class="n">bot</span><span class="p">.</span><span class="n">command</span><span class="p">()</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">안녕</span><span class="p">(</span><span class="n">ctx</span><span class="p">):</span>
    <span class="k">await</span> <span class="n">ctx</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="s">'반갑습니다'</span><span class="p">)</span>

<span class="n">bot</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="s">'token'</span><span class="p">)</span>
</code></pre></div></div>

<p>이때 <code class="language-plaintext highlighter-rouge">commands.Bot</code>이 저희가 만들게 되는 봇의 인스턴스입니다. 매개변수로 값을 입력하여 봇의 여러 기본 설정들을 해줄 수 있는데 이는 다음에 더 깊게 알아보겠습니다.</p>

<p>저희가 만든 bot은 크게 두가지의 방식으로 작동하며 이를 꼭 명시하여 구분해주어야 합니다.</p>
<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">@bot.event</code> <br />
어떤 이벤트가 발생할때 봇이 그 사건을 인식하고 코드에 작성된대로 작동하는 것<br />
예를 들어 <strong>봇이 시작된경우</strong>, <strong>봇이 새로운 서버에 접속한 경우</strong>, <strong>새로운 사람이 서버에 입장한 경우</strong>, <strong>어떤 사람이 보이스 채널에 접속한 경우</strong> 등 수많은 이벤트들이 존재합니다. 이는 <a href="https://discordpy.readthedocs.io/en/latest/api.html?highlight=event#discord-api-events" target="_blank">discord.py 문서 홈페이지</a>에서 찾아볼 수 있습니다.</p>

    <p>앞서 저희가 작성한 코드를 보면 <code class="language-plaintext highlighter-rouge">on_ready()</code> 이벤트가 발생시 해당 print문이 작동하게 되는 것 입니다. 이때 <code class="language-plaintext highlighter-rouge">on_ready()</code> 이벤트는 봇이 실행되어 디스코드 서버에 접속하여 데이터를 전달받을 준비가 끝난 경우를 뜻합니다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">@bot.command()</code> <br />
설명에 앞서서, 모든 봇의 명령어 앞에는 사용자의 채팅이 봇에게 명령을 하는것인지, 아닌지를 판별하기 위한 <strong>접두사(prefix)</strong> 가 존재합니다. 저희는 <code class="language-plaintext highlighter-rouge">commands.Bot</code> 객체를 생성하면서 해당 접두사를 <code class="language-plaintext highlighter-rouge">!</code>로 설정해주었습니다. 이는 봇의 모든 명령어 앞에는 <code class="language-plaintext highlighter-rouge">!</code>를 붙여야 한다는 의미입니다.</p>

    <p>앞서 저희 코드에서 <code class="language-plaintext highlighter-rouge">async def 안녕(ctx):</code>으로 작성된 부분을 보면 사용자가 채팅 채널에 <code class="language-plaintext highlighter-rouge">!안녕</code> 이라는 메세지를 보낼경우 봇이 작동하게 됩니다. 따라서 봇이 어떤 명령어를 가질 것인지, 어떤 명령어에 어떤 작동을 할 것인지 자유롭게 작성할 수 있습니다.</p>
  </li>
</ol>

<hr />
<h2 id="2-봇의-작동을-위한-토큰-값-얻기">2. 봇의 작동을 위한 토큰 값 얻기</h2>
<hr />
<p>기본적인 봇의 작성은 끝났지만 봇을 실제로 작동시키려면 <strong>해당 봇이 가지는 고유한 토큰 값이 있어야 합니다.</strong> 이는 디스코드 계정만 있다면 쉽게 토큰 값을 얻을 수 있습니다.</p>

<p>먼저 <a href="https://discord.com/developers/docs/intro" target="_blank">Discord Developer Portal</a> 에 접속하여 디스코드 계정으로 로그인 한뒤 <strong>Applications</strong> 로 이동해봅시다.</p>

<p><img src="https://user-images.githubusercontent.com/69145799/108463845-7bbae580-72c2-11eb-9fdf-cf79f7c426ea.png" alt="discord" /></p>

<p>다음 오른쪽 상단에 있는 <code class="language-plaintext highlighter-rouge">New Application</code>을 클릭하여</p>

<p><img src="https://user-images.githubusercontent.com/69145799/108464440-7c07b080-72c3-11eb-9e2b-4262b5424aff.png" alt="discord2" /></p>

<p>봇의 이름을 정한후 생성하도록 합시다!</p>

<p><img src="https://user-images.githubusercontent.com/69145799/108464847-40211b00-72c4-11eb-9a2e-3079bfbc1f3a.png" alt="discord3" /></p>

<p>하지만 아직 봇이 생성된 것은 아닙니다! <strong>왼쪽 메뉴에 <code class="language-plaintext highlighter-rouge">Bot</code>에 들어가서 <code class="language-plaintext highlighter-rouge">Add Bot</code>을 클릭</strong> 하여 저희가 생성한 <code class="language-plaintext highlighter-rouge">Application</code>을 봇으로 추가할 수 있습니다.</p>

<p><img src="https://user-images.githubusercontent.com/69145799/108465101-b9207280-72c4-11eb-8ffa-69f24e95fc43.png" alt="discord4" /></p>

<p>실제 봇이 생성된 모습입니다! 사용자는 직접 봇의 프로필을 언제든지 수정할 수 있습니다.<br />
이제 저희가 생성한 봇의 고유한 토큰 값이 생성되었습니다.<br />
<code class="language-plaintext highlighter-rouge">Click to Reveal Token</code>을 클릭하여 토큰 값을 직접 확인할 수 있습니다.</p>

<p><strong>[주의!] 고유한 토큰 값은 절대 외부에 유출되어선 안됩니다.</strong></p>

<p>만약 <strong>토큰값이 공개되었을 경우</strong> 해당 홈페이지의 <code class="language-plaintext highlighter-rouge">Regenerate</code> 를 통하여 토큰을 새로 받을 수도 있으며 저의 경우는 GitHub를 통해 실수로 토큰 값을 함께 Push 한적이 있었고, 이때 디스코드에서 이를 알아채고 자동으로 토큰 값이 재생성된 경우가 있었습니다.</p>

<p>이제 코드 마지막 부분에 <code class="language-plaintext highlighter-rouge">bot.run('token')</code>에서 자신의 토큰 값을 넣어봅시다.
그리고 코드를 실행해봅시다!</p>

<p><img src="https://user-images.githubusercontent.com/69145799/108466326-c9d1e800-72c6-11eb-9147-ce7b57e3e8f0.png" alt="discord5" /></p>

<hr />
<h2 id="3-봇을-내-디스코드-서버에-가져와-테스트-해보기">3. 봇을 내 디스코드 서버에 가져와 테스트 해보기</h2>
<hr />
<p>이제 봇이 정상적으로 만들어졌으니 <strong>봇을 직접 디스코드 서버에 초대해봅시다!</strong><br />
<code class="language-plaintext highlighter-rouge">Discord Developer Portal</code>에서 <code class="language-plaintext highlighter-rouge">OAuth2</code>에 들어간뒤 해당 봇의 <code class="language-plaintext highlighter-rouge">SCOPES</code>와 <code class="language-plaintext highlighter-rouge">BOT PERMISSIONS</code>를 체크하게 되면 봇을 초대할 수 있는 URL이 생성됩니다.</p>

<p><strong>봇의 범위와 권한을 설정함으로써 봇이 정상적으로 작동하는데 필요한 권한을 얻을 수 있습니다.</strong></p>

<p><img src="https://user-images.githubusercontent.com/69145799/108466611-3cdb5e80-72c7-11eb-95cf-3b3360bb0290.png" alt="discord6" /></p>

<p><strong>봇을 디스코드 서버에 초대한뒤 <code class="language-plaintext highlighter-rouge">!안녕</code> 명령어를 입력해봅시다!</strong></p>

<p><img src="https://user-images.githubusercontent.com/69145799/108467380-73fe3f80-72c8-11eb-937e-3809aeb58b48.png" alt="" /></p>

<p>봇이 정상적으로 동작하는 것을 확인할 수 있습니다.<br />
다음 글에서는 봇의 기본 설정들과 <code class="language-plaintext highlighter-rouge">discord</code> 라이브러리의 여러 클래스들에 대해 알아보겠습니다. 감사합니다!</p>

<hr />
<h2 id="부록">부록.</h2>
<hr />
<p><strong>1. 디스코드 봇을 실행한 후 해당 오류가 발생할 수 있습니다.</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>raise LoginFailure('Improper token has been passed.') from exc
discord.errors.LoginFailure: Improper token has been passed.
</code></pre></div></div>

<p>이는 코드에 입력된 토큰 값이 적절하지 않은 경우이며 토큰 값은 <code class="language-plaintext highlighter-rouge">String</code>형태의 매개변수 입니다.</p>

<ul>
  <li>토큰 <code class="language-plaintext highlighter-rouge">12345678910</code> 의 경우
<code class="language-plaintext highlighter-rouge">bot.run('12345678910')</code> 와 같이 입력해야함.</li>
</ul>

<p><strong>2. 토큰 값을 코드에 포함하지 않고 싶은 경우</strong></p>

<p>이는 파일 시스템을 이용하여 쉽게 구현할 수 있습니다.</p>
<ol>
  <li>먼저 파이썬 코드가 있는 경로 내에 새로운 파일을 생성합니다 <code class="language-plaintext highlighter-rouge">예) .token</code></li>
  <li><code class="language-plaintext highlighter-rouge">.token</code>파일에 고유한 토큰 값을 입력하여 저장합니다.</li>
  <li>파이썬의 os 라이브러리를 이용하여 해당 파일을 읽어 토큰 값을 불러옵니다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os</span>

<span class="n">token_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">__file__</span><span class="p">))</span> <span class="o">+</span> <span class="s">'/.token'</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">token_path</span><span class="p">,</span> <span class="s">'r'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">'utf-8'</span><span class="p">)</span> <span class="k">as</span> <span class="n">t</span><span class="p">:</span>
    <span class="n">token</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">readlines</span><span class="p">()</span>
       
 <span class="p">...</span><span class="n">코드</span> <span class="n">생략</span><span class="p">...</span>
    
 <span class="n">bot</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
    
</code></pre></div>    </div>
  </li>
</ol>
:ET